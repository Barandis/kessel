export function range(start?: number, end: number, step?: number, inclusive?: boolean): Iterator<number, undefined, undefined>;
export function enumerate(iterable: Iterable<T>): Iterator<[number, T], undefined, undefined>;
export function viewToString(index: number, length: number, view: DataView): string;
export function stringToView(str: string): DataView;
export function charLength(str: string): number;
export function nextCharWidth(index: number, view: DataView): (1 | 2 | 3 | 4);
export function nextChar(index: number, view: DataView): { width: number, next: string };
export function nextChars(index: number, view: DataView, count: number): { width: number, next: string };
export function quote(str: string): string;
export function twin<T>(value: T): [T, T];
export function commaSeparate(messages: string[]): string;
export function track(fn: Function, prop?: string | symbol): Function;
export function ordinal(n: number): string;
export function stringify(value: any): string;
export function articlify(str: string): string;
export const encoder: TextEncoder;
export const decoder: TextDecoder;
